{
  "uid" : "a95213dd3bdb573d",
  "name" : "商品信息查询—上一次token值",
  "fullName" : "testcases.test_business_token_goodsinfo04.test_business_token_goodsinfo03.TestGoodsInfo#test_goods_info",
  "historyId" : "f403b129b7549cbbba14cb6204b62e82",
  "time" : {
    "start" : 1646808790443,
    "stop" : 1646808790655,
    "duration" : 212
  },
  "description" : "商品信息查询模块接口测试用例",
  "descriptionHtml" : "<p>商品信息查询模块接口测试用例</p>\n",
  "status" : "failed",
  "statusMessage" : "AssertionError: assert {'code': 1007...请检查token是否失效'} == {'code': 1000...'msg': '查询成功'}\n  Differing items:\n  {'msg': '鉴权失败,请检查token是否失效'} != {'msg': '查询成功'}\n  {'code': 1007} != {'code': 1000}\n  Right contains 1 more item:\n  {'goods_tiems': [{'goodsName': '预留数据',\n                    'num': 1000,\n                    'promotePrice': 0.0,...\n  \n  ...Full output truncated (111 lines hidden), use '-vv' to show",
  "statusTrace" : "self = <autotest.testcases.test_business_token_goodsinfo04.test_business_token_goodsinfo03.TestGoodsInfo object at 0x00000283224B37B8>\ncase = <comms.excel_utils.CaseData object at 0x00000283222BF390>\n\n    @allure.severity(\"normal\")\n    @allure.description(\"商品信息查询模块接口测试用例\")\n    @pytest.mark.parametrize(\"case\", cases)\n    def test_goods_info(self, case):\n        allure.dynamic.title(case.case_title)\n        allure.attach(body=case.url, name='接口路径')\n        allure.attach(body=case.case_data, name='请求参数')\n    \n        if '#token#' in case.case_data:\n            case.case_data = replace_data(case.case_data, 'token', get_token())\n            if case.case_id == 3:  # token区分大小写的场景\n                case.case_data = replace_data(case.case_data, 'token', get_token().upper())\n            if case.case_id == 4:  # token值为上一次值的场景\n                token = get_token()\n                get_token()\n                case.case_data = replace_data(case.case_data, 'token', token)\n    \n        response = requests.post(url=case.url, data=eval(case.case_data))\n        res = response.json()\n        allure.attach(body=str(res), name='响应结果')\n    \n        try:\n            if case.case_id == 1:\n                assert case.expect in str(res)  # 判断响应体包含 查询成功\n                # 判断查询商品条目数是否正确\n                # 1.获取返回的结果的条目数\n                res_count = len(res[\"goods_tiems\"])\n                # 2.获取数据库的商品条目数\n                db_count = self.db.find_count('select * from tb_goods;')\n                assert res_count == db_count  # 响应体的商品条目数和数据库的商品条目数做对比\n            elif case.case_id in (5, 6):\n                assert case.expect in str(res)  # 判断响应体包含 查询成功\n                res_count = len(res[\"goods_tiems\"])\n                db_count = self.db.find_count('select * from tb_goods where isOnSale = %s;',\n                                              (eval(case.case_data)[\"isOnSale\"],))\n                assert res_count == db_count  # 响应体的商品条目数和数据库的商品条目数做对比\n            elif case.case_id in (7, 8):\n                assert case.expect in str(res)  # 判断响应体包含 查询成功\n                res_count = len(res[\"goods_tiems\"])\n                db_count = self.db.find_count('select * from tb_goods where isPromote = %s;',\n                                              (eval(case.case_data)[\"isPromote\"],))\n                assert res_count == db_count  # 响应体的商品条目数和数据库的商品条目数做对比\n            elif case.case_id in (9, 10, 11, 12):\n                assert case.expect in str(res)  # 判断响应体包含 查询成功\n                res_count = len(res[\"goods_tiems\"])\n                db_count = self.db.find_count('select * from tb_goods where isPromote = %s and isOnSale = %s;',\n                                              (eval(case.case_data)[\"isPromote\"], eval(case.case_data)[\"isOnSale\"]))\n                assert res_count == db_count  # 响应体的商品条目数和数据库的商品条目数做对比\n            elif case.case_id in (13, 14, 15, 16, 17, 18, 19, 20, 23):\n                assert case.expect in str(res)  # 判断响应体包含 查询成功\n                res_count = len(res[\"goods_tiems\"])\n                assert res_count == 1  # 响应体的商品条目数和数据库的商品条目数做对比\n            else:\n                assert eval(case.expect) == res\n        except AssertionError as e:\n            ReadExcel.write_data(DATA_FILE, 'business_token_goodsinfo', case.case_id, 7, '失败')\n            logger.error('测试编号{},测试标题{},执行失败!实际结果{}'.format(case.case_id, case.case_title, res))\n            logger.exception(e)\n>           raise e\n\ntestcases\\test_business_token_goodsinfo04\\test_business_token_goodsinfo03.py:93: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <autotest.testcases.test_business_token_goodsinfo04.test_business_token_goodsinfo03.TestGoodsInfo object at 0x00000283224B37B8>\ncase = <comms.excel_utils.CaseData object at 0x00000283222BF390>\n\n    @allure.severity(\"normal\")\n    @allure.description(\"商品信息查询模块接口测试用例\")\n    @pytest.mark.parametrize(\"case\", cases)\n    def test_goods_info(self, case):\n        allure.dynamic.title(case.case_title)\n        allure.attach(body=case.url, name='接口路径')\n        allure.attach(body=case.case_data, name='请求参数')\n    \n        if '#token#' in case.case_data:\n            case.case_data = replace_data(case.case_data, 'token', get_token())\n            if case.case_id == 3:  # token区分大小写的场景\n                case.case_data = replace_data(case.case_data, 'token', get_token().upper())\n            if case.case_id == 4:  # token值为上一次值的场景\n                token = get_token()\n                get_token()\n                case.case_data = replace_data(case.case_data, 'token', token)\n    \n        response = requests.post(url=case.url, data=eval(case.case_data))\n        res = response.json()\n        allure.attach(body=str(res), name='响应结果')\n    \n        try:\n            if case.case_id == 1:\n                assert case.expect in str(res)  # 判断响应体包含 查询成功\n                # 判断查询商品条目数是否正确\n                # 1.获取返回的结果的条目数\n                res_count = len(res[\"goods_tiems\"])\n                # 2.获取数据库的商品条目数\n                db_count = self.db.find_count('select * from tb_goods;')\n                assert res_count == db_count  # 响应体的商品条目数和数据库的商品条目数做对比\n            elif case.case_id in (5, 6):\n                assert case.expect in str(res)  # 判断响应体包含 查询成功\n                res_count = len(res[\"goods_tiems\"])\n                db_count = self.db.find_count('select * from tb_goods where isOnSale = %s;',\n                                              (eval(case.case_data)[\"isOnSale\"],))\n                assert res_count == db_count  # 响应体的商品条目数和数据库的商品条目数做对比\n            elif case.case_id in (7, 8):\n                assert case.expect in str(res)  # 判断响应体包含 查询成功\n                res_count = len(res[\"goods_tiems\"])\n                db_count = self.db.find_count('select * from tb_goods where isPromote = %s;',\n                                              (eval(case.case_data)[\"isPromote\"],))\n                assert res_count == db_count  # 响应体的商品条目数和数据库的商品条目数做对比\n            elif case.case_id in (9, 10, 11, 12):\n                assert case.expect in str(res)  # 判断响应体包含 查询成功\n                res_count = len(res[\"goods_tiems\"])\n                db_count = self.db.find_count('select * from tb_goods where isPromote = %s and isOnSale = %s;',\n                                              (eval(case.case_data)[\"isPromote\"], eval(case.case_data)[\"isOnSale\"]))\n                assert res_count == db_count  # 响应体的商品条目数和数据库的商品条目数做对比\n            elif case.case_id in (13, 14, 15, 16, 17, 18, 19, 20, 23):\n                assert case.expect in str(res)  # 判断响应体包含 查询成功\n                res_count = len(res[\"goods_tiems\"])\n                assert res_count == 1  # 响应体的商品条目数和数据库的商品条目数做对比\n            else:\n>               assert eval(case.expect) == res\nE               AssertionError: assert {'code': 1007...请检查token是否失效'} == {'code': 1000...'msg': '查询成功'}\nE                 Differing items:\nE                 {'msg': '鉴权失败,请检查token是否失效'} != {'msg': '查询成功'}\nE                 {'code': 1007} != {'code': 1000}\nE                 Right contains 1 more item:\nE                 {'goods_tiems': [{'goodsName': '预留数据',\nE                                   'num': 1000,\nE                                   'promotePrice': 0.0,...\nE                 \nE                 ...Full output truncated (111 lines hidden), use '-vv' to show\n\ntestcases\\test_business_token_goodsinfo04\\test_business_token_goodsinfo03.py:88: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : false,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ {
    "name" : "connect_db",
    "time" : {
      "start" : 1646808790440,
      "stop" : 1646808790442,
      "duration" : 2
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0
  } ],
  "testStage" : {
    "description" : "商品信息查询模块接口测试用例",
    "status" : "failed",
    "statusMessage" : "AssertionError: assert {'code': 1007...请检查token是否失效'} == {'code': 1000...'msg': '查询成功'}\n  Differing items:\n  {'msg': '鉴权失败,请检查token是否失效'} != {'msg': '查询成功'}\n  {'code': 1007} != {'code': 1000}\n  Right contains 1 more item:\n  {'goods_tiems': [{'goodsName': '预留数据',\n                    'num': 1000,\n                    'promotePrice': 0.0,...\n  \n  ...Full output truncated (111 lines hidden), use '-vv' to show",
    "statusTrace" : "self = <autotest.testcases.test_business_token_goodsinfo04.test_business_token_goodsinfo03.TestGoodsInfo object at 0x00000283224B37B8>\ncase = <comms.excel_utils.CaseData object at 0x00000283222BF390>\n\n    @allure.severity(\"normal\")\n    @allure.description(\"商品信息查询模块接口测试用例\")\n    @pytest.mark.parametrize(\"case\", cases)\n    def test_goods_info(self, case):\n        allure.dynamic.title(case.case_title)\n        allure.attach(body=case.url, name='接口路径')\n        allure.attach(body=case.case_data, name='请求参数')\n    \n        if '#token#' in case.case_data:\n            case.case_data = replace_data(case.case_data, 'token', get_token())\n            if case.case_id == 3:  # token区分大小写的场景\n                case.case_data = replace_data(case.case_data, 'token', get_token().upper())\n            if case.case_id == 4:  # token值为上一次值的场景\n                token = get_token()\n                get_token()\n                case.case_data = replace_data(case.case_data, 'token', token)\n    \n        response = requests.post(url=case.url, data=eval(case.case_data))\n        res = response.json()\n        allure.attach(body=str(res), name='响应结果')\n    \n        try:\n            if case.case_id == 1:\n                assert case.expect in str(res)  # 判断响应体包含 查询成功\n                # 判断查询商品条目数是否正确\n                # 1.获取返回的结果的条目数\n                res_count = len(res[\"goods_tiems\"])\n                # 2.获取数据库的商品条目数\n                db_count = self.db.find_count('select * from tb_goods;')\n                assert res_count == db_count  # 响应体的商品条目数和数据库的商品条目数做对比\n            elif case.case_id in (5, 6):\n                assert case.expect in str(res)  # 判断响应体包含 查询成功\n                res_count = len(res[\"goods_tiems\"])\n                db_count = self.db.find_count('select * from tb_goods where isOnSale = %s;',\n                                              (eval(case.case_data)[\"isOnSale\"],))\n                assert res_count == db_count  # 响应体的商品条目数和数据库的商品条目数做对比\n            elif case.case_id in (7, 8):\n                assert case.expect in str(res)  # 判断响应体包含 查询成功\n                res_count = len(res[\"goods_tiems\"])\n                db_count = self.db.find_count('select * from tb_goods where isPromote = %s;',\n                                              (eval(case.case_data)[\"isPromote\"],))\n                assert res_count == db_count  # 响应体的商品条目数和数据库的商品条目数做对比\n            elif case.case_id in (9, 10, 11, 12):\n                assert case.expect in str(res)  # 判断响应体包含 查询成功\n                res_count = len(res[\"goods_tiems\"])\n                db_count = self.db.find_count('select * from tb_goods where isPromote = %s and isOnSale = %s;',\n                                              (eval(case.case_data)[\"isPromote\"], eval(case.case_data)[\"isOnSale\"]))\n                assert res_count == db_count  # 响应体的商品条目数和数据库的商品条目数做对比\n            elif case.case_id in (13, 14, 15, 16, 17, 18, 19, 20, 23):\n                assert case.expect in str(res)  # 判断响应体包含 查询成功\n                res_count = len(res[\"goods_tiems\"])\n                assert res_count == 1  # 响应体的商品条目数和数据库的商品条目数做对比\n            else:\n                assert eval(case.expect) == res\n        except AssertionError as e:\n            ReadExcel.write_data(DATA_FILE, 'business_token_goodsinfo', case.case_id, 7, '失败')\n            logger.error('测试编号{},测试标题{},执行失败!实际结果{}'.format(case.case_id, case.case_title, res))\n            logger.exception(e)\n>           raise e\n\ntestcases\\test_business_token_goodsinfo04\\test_business_token_goodsinfo03.py:93: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <autotest.testcases.test_business_token_goodsinfo04.test_business_token_goodsinfo03.TestGoodsInfo object at 0x00000283224B37B8>\ncase = <comms.excel_utils.CaseData object at 0x00000283222BF390>\n\n    @allure.severity(\"normal\")\n    @allure.description(\"商品信息查询模块接口测试用例\")\n    @pytest.mark.parametrize(\"case\", cases)\n    def test_goods_info(self, case):\n        allure.dynamic.title(case.case_title)\n        allure.attach(body=case.url, name='接口路径')\n        allure.attach(body=case.case_data, name='请求参数')\n    \n        if '#token#' in case.case_data:\n            case.case_data = replace_data(case.case_data, 'token', get_token())\n            if case.case_id == 3:  # token区分大小写的场景\n                case.case_data = replace_data(case.case_data, 'token', get_token().upper())\n            if case.case_id == 4:  # token值为上一次值的场景\n                token = get_token()\n                get_token()\n                case.case_data = replace_data(case.case_data, 'token', token)\n    \n        response = requests.post(url=case.url, data=eval(case.case_data))\n        res = response.json()\n        allure.attach(body=str(res), name='响应结果')\n    \n        try:\n            if case.case_id == 1:\n                assert case.expect in str(res)  # 判断响应体包含 查询成功\n                # 判断查询商品条目数是否正确\n                # 1.获取返回的结果的条目数\n                res_count = len(res[\"goods_tiems\"])\n                # 2.获取数据库的商品条目数\n                db_count = self.db.find_count('select * from tb_goods;')\n                assert res_count == db_count  # 响应体的商品条目数和数据库的商品条目数做对比\n            elif case.case_id in (5, 6):\n                assert case.expect in str(res)  # 判断响应体包含 查询成功\n                res_count = len(res[\"goods_tiems\"])\n                db_count = self.db.find_count('select * from tb_goods where isOnSale = %s;',\n                                              (eval(case.case_data)[\"isOnSale\"],))\n                assert res_count == db_count  # 响应体的商品条目数和数据库的商品条目数做对比\n            elif case.case_id in (7, 8):\n                assert case.expect in str(res)  # 判断响应体包含 查询成功\n                res_count = len(res[\"goods_tiems\"])\n                db_count = self.db.find_count('select * from tb_goods where isPromote = %s;',\n                                              (eval(case.case_data)[\"isPromote\"],))\n                assert res_count == db_count  # 响应体的商品条目数和数据库的商品条目数做对比\n            elif case.case_id in (9, 10, 11, 12):\n                assert case.expect in str(res)  # 判断响应体包含 查询成功\n                res_count = len(res[\"goods_tiems\"])\n                db_count = self.db.find_count('select * from tb_goods where isPromote = %s and isOnSale = %s;',\n                                              (eval(case.case_data)[\"isPromote\"], eval(case.case_data)[\"isOnSale\"]))\n                assert res_count == db_count  # 响应体的商品条目数和数据库的商品条目数做对比\n            elif case.case_id in (13, 14, 15, 16, 17, 18, 19, 20, 23):\n                assert case.expect in str(res)  # 判断响应体包含 查询成功\n                res_count = len(res[\"goods_tiems\"])\n                assert res_count == 1  # 响应体的商品条目数和数据库的商品条目数做对比\n            else:\n>               assert eval(case.expect) == res\nE               AssertionError: assert {'code': 1007...请检查token是否失效'} == {'code': 1000...'msg': '查询成功'}\nE                 Differing items:\nE                 {'msg': '鉴权失败,请检查token是否失效'} != {'msg': '查询成功'}\nE                 {'code': 1007} != {'code': 1000}\nE                 Right contains 1 more item:\nE                 {'goods_tiems': [{'goodsName': '预留数据',\nE                                   'num': 1000,\nE                                   'promotePrice': 0.0,...\nE                 \nE                 ...Full output truncated (111 lines hidden), use '-vv' to show\n\ntestcases\\test_business_token_goodsinfo04\\test_business_token_goodsinfo03.py:88: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "b1f3fc16d88eb032",
      "name" : "接口路径",
      "source" : "b1f3fc16d88eb032.attach",
      "type" : "text/plain",
      "size" : 46
    }, {
      "uid" : "f0674dc3f827c75f",
      "name" : "请求参数",
      "source" : "f0674dc3f827c75f.attach",
      "type" : "text/plain",
      "size" : 68
    }, {
      "uid" : "f163fbe3d6481f00",
      "name" : "响应结果",
      "source" : "f163fbe3d6481f00.attach",
      "type" : "text/plain",
      "size" : 1139
    }, {
      "uid" : "9e7841f69fe49792",
      "name" : "log",
      "source" : "9e7841f69fe49792.txt",
      "type" : "text/plain",
      "size" : 3372
    } ],
    "parameters" : [ ],
    "attachmentsCount" : 4,
    "shouldDisplayMessage" : true,
    "hasContent" : true,
    "stepsCount" : 0
  },
  "afterStages" : [ {
    "name" : "connect_db::0",
    "time" : {
      "start" : 1646808790664,
      "stop" : 1646808790664,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0
  } ],
  "labels" : [ {
    "name" : "severity",
    "value" : "normal"
  }, {
    "name" : "feature",
    "value" : "商品信息查询模块"
  }, {
    "name" : "parentSuite",
    "value" : "testcases.test_business_token_goodsinfo04"
  }, {
    "name" : "suite",
    "value" : "test_business_token_goodsinfo03"
  }, {
    "name" : "subSuite",
    "value" : "TestGoodsInfo"
  }, {
    "name" : "host",
    "value" : "DESKTOP-AM9Q0VH"
  }, {
    "name" : "thread",
    "value" : "10028-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "testcases.test_business_token_goodsinfo04.test_business_token_goodsinfo03"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "case",
    "value" : "<comms.excel_utils.CaseData object at 0x00000283222BF390>"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "a95213dd3bdb573d.json",
  "parameterValues" : [ "<comms.excel_utils.CaseData object at 0x00000283222BF390>" ]
}