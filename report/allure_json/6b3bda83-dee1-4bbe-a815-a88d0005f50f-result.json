{"name": "测试token为失效值的场景", "status": "failed", "statusDetails": {"message": "AssertionError: assert {'code': 1004...请检查token是否失效'} == {'code': 1000...xiaohei', ...}\n  Differing items:\n  {'msg': '鉴权失败,请检查token是否失效'} != {'msg': '查询成功'}\n  {'code': 1004} != {'code': 1000}\n  Right contains 5 more items:\n  {'goods_tiems': [{'goods_name': 'Mac pro', 'goods_price': 9999.0},\n                   {'goods_name': '华为P30', 'goods_price': 59999.0}],\n   'name': 'xiaohei',...\n  \n  ...Full output truncated (21 lines hidden), use '-vv' to show", "trace": "self = <autotest.testcases.test_business_token_order_items05.test_business_token_order_items02.TestOrderItems object at 0x0000028322579358>\ncase = <comms.excel_utils.CaseData object at 0x000002832259A0F0>\n\n    @allure.severity(\"normal\")\n    @allure.description(\"商品订单查询模块接口测试用例\")\n    @pytest.mark.parametrize(\"case\", cases)\n    def test_order_items(self, case):\n        allure.dynamic.title(case.case_title)\n    \n        if \"#token#\" in case.case_data:\n            case.case_data = replace_data(case.case_data, 'token', get_token())\n            if case.case_id == 3:  # token区分大小写\n                case.case_data = replace_data(case.case_data, 'token', get_token().upper())\n            if case.case_id == 4:  # token值过期的场景\n                token = get_token()\n                get_token()\n                case.case_data = replace_data(case.case_data, 'token', token)\n        if \"#orderId#\" in case.case_data:\n            case.case_data = replace_data(case.case_data, 'orderId', self.orderId)\n        if case.case_id == 7:  # orderId不存在的场景\n            self.db.cud(\"delete from tb_order where orderId = %s;\", (eval(case.case_data)[\"orderId\"],))\n    \n        allure.attach(body=case.url, name='接口路径')\n        allure.attach(body=case.case_data, name='请求参数')\n    \n        response = requests.post(url=case.url, data=eval(case.case_data))\n        res = response.json()\n        allure.attach(body=str(res), name='响应参数')\n    \n        try:\n            # 四表连接查询orderId数据,如果查询多条和goods_tiems作比较,如果查询到数据断言响应报文包含查询成功,如果没查询到数据,断言包含查询无结果\n            if case.case_id == 1:\n                sql = 'select * from tb_user u,tb_order o,tb_order_goods og,tb_goods g where u.userId = o.userId and ' \\\n                      'o.orderId = og.orderId and og.goodsId = g.goodsId and o.orderId = %s;'\n                count = self.db.find_count(sql, (self.orderId,))\n                if count > 0:\n                    assert '查询成功' in str(res)\n                    assert count == len(res[\"goods_tiems\"])\n                elif count == 0:\n                    assert '查询无结果' in str(res)\n            else:\n                assert eval(case.expect) == res\n        except AssertionError as e:\n            ReadExcel.write_data(DATA_FILE, 'business_token_order_items', case.case_id, 7, '失败')\n            logger.error(\"测试编号{},测试标题{},执行失败!实际结果{}\".format(case.case_id, case.case_title, res))\n            logger.exception(e)\n>           raise e\n\ntestcases\\test_business_token_order_items05\\test_business_token_order_items02.py:80: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <autotest.testcases.test_business_token_order_items05.test_business_token_order_items02.TestOrderItems object at 0x0000028322579358>\ncase = <comms.excel_utils.CaseData object at 0x000002832259A0F0>\n\n    @allure.severity(\"normal\")\n    @allure.description(\"商品订单查询模块接口测试用例\")\n    @pytest.mark.parametrize(\"case\", cases)\n    def test_order_items(self, case):\n        allure.dynamic.title(case.case_title)\n    \n        if \"#token#\" in case.case_data:\n            case.case_data = replace_data(case.case_data, 'token', get_token())\n            if case.case_id == 3:  # token区分大小写\n                case.case_data = replace_data(case.case_data, 'token', get_token().upper())\n            if case.case_id == 4:  # token值过期的场景\n                token = get_token()\n                get_token()\n                case.case_data = replace_data(case.case_data, 'token', token)\n        if \"#orderId#\" in case.case_data:\n            case.case_data = replace_data(case.case_data, 'orderId', self.orderId)\n        if case.case_id == 7:  # orderId不存在的场景\n            self.db.cud(\"delete from tb_order where orderId = %s;\", (eval(case.case_data)[\"orderId\"],))\n    \n        allure.attach(body=case.url, name='接口路径')\n        allure.attach(body=case.case_data, name='请求参数')\n    \n        response = requests.post(url=case.url, data=eval(case.case_data))\n        res = response.json()\n        allure.attach(body=str(res), name='响应参数')\n    \n        try:\n            # 四表连接查询orderId数据,如果查询多条和goods_tiems作比较,如果查询到数据断言响应报文包含查询成功,如果没查询到数据,断言包含查询无结果\n            if case.case_id == 1:\n                sql = 'select * from tb_user u,tb_order o,tb_order_goods og,tb_goods g where u.userId = o.userId and ' \\\n                      'o.orderId = og.orderId and og.goodsId = g.goodsId and o.orderId = %s;'\n                count = self.db.find_count(sql, (self.orderId,))\n                if count > 0:\n                    assert '查询成功' in str(res)\n                    assert count == len(res[\"goods_tiems\"])\n                elif count == 0:\n                    assert '查询无结果' in str(res)\n            else:\n>               assert eval(case.expect) == res\nE               AssertionError: assert {'code': 1004...请检查token是否失效'} == {'code': 1000...xiaohei', ...}\nE                 Differing items:\nE                 {'msg': '鉴权失败,请检查token是否失效'} != {'msg': '查询成功'}\nE                 {'code': 1004} != {'code': 1000}\nE                 Right contains 5 more items:\nE                 {'goods_tiems': [{'goods_name': 'Mac pro', 'goods_price': 9999.0},\nE                                  {'goods_name': '华为P30', 'goods_price': 59999.0}],\nE                  'name': 'xiaohei',...\nE                 \nE                 ...Full output truncated (21 lines hidden), use '-vv' to show\n\ntestcases\\test_business_token_order_items05\\test_business_token_order_items02.py:75: AssertionError"}, "description": "商品订单查询模块接口测试用例", "attachments": [{"name": "接口路径", "source": "bec0bd65-a079-465a-aa9b-22c5428a0677-attachment.attach"}, {"name": "请求参数", "source": "704672e1-4e36-4097-b7c8-113fcd433f0e-attachment.attach"}, {"name": "响应参数", "source": "fed2b3d1-2899-4876-8a5f-3b973c229a79-attachment.attach"}, {"name": "log", "source": "aa13a21e-0a70-411d-b8c6-e55e9e56e944-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "case", "value": "<comms.excel_utils.CaseData object at 0x000002832259A0F0>"}], "start": 1646808796332, "stop": 1646808796517, "uuid": "69665ed4-c7ef-4252-9f71-53cd404293fa", "historyId": "62ffe027a21686577a1f443d45ee8739", "testCaseId": "d12171689397527ef9f91b67d2236682", "fullName": "testcases.test_business_token_order_items05.test_business_token_order_items02.TestOrderItems#test_order_items", "labels": [{"name": "severity", "value": "normal"}, {"name": "feature", "value": "商品订单查询模块"}, {"name": "parentSuite", "value": "testcases.test_business_token_order_items05"}, {"name": "suite", "value": "test_business_token_order_items02"}, {"name": "subSuite", "value": "TestOrderItems"}, {"name": "host", "value": "DESKTOP-AM9Q0VH"}, {"name": "thread", "value": "10028-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.test_business_token_order_items05.test_business_token_order_items02"}]}