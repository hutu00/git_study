{"name": "用户名不区分大小写", "status": "failed", "statusDetails": {"message": "AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...MDQ4NWFhNg=='}\n  Differing items:\n  {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}\n  {'code': 1007} != {'code': 1000}\n  Right contains 1 more item:\n  {'token': 'MTY0NjgzODc5NS42NDE4OTQ6Y2E0ZGRkNGU2MzI1OTZiZmE2MTRiODAyMGMxN2ZjMmVjMDQ4NWFhNg=='}\n  Full diff:\n    {...\n  \n  ...Full output truncated (9 lines hidden), use '-vv' to show", "trace": "self = <autotest.testcases.test_business_token_login02.test_login03.TestLogin object at 0x0000028322486AC8>\ncase = <comms.excel_utils.CaseData object at 0x00000283224DE588>\n\n    @allure.severity(\"critical\")\n    @allure.description(\"商品登录模块接口测试用例\")\n    @pytest.mark.parametrize('case', cases)\n    def test_login(self, case):\n        allure.dynamic.title(case.case_title)\n        allure.attach(body=case.url, name='接口路径')\n        allure.attach(body=case.case_data, name='请求参数')\n    \n        uname = eval(case.case_data)[\"username\"]\n        pwd = eval(case.case_data)[\"password\"]\n        # 正确流程\n        if case.case_id == 1:\n            self.db.cud(\"delete from tb_user where name = %s;\", (uname,))\n            self.db.cud(\"insert into tb_user(name,passwd,email,phone) values(%s,%s,%s,%s);\",\n                        (uname, pwd, 'tester24@163.com', '17788995566'))\n        if case.case_id == 5:  # 用户名不存在的场景\n            self.db.cud(\"delete from tb_user where name = %s;\", (uname,))\n    \n        response = requests.post(url=case.url, data=eval(case.case_data))\n        res = response.json()\n        allure.attach(body=str(res), name='响应结果')\n    \n        try:\n            if case.case_id == 1:\n                assert case.expect in str(res)\n            else:\n                assert eval(case.expect) == res\n        except AssertionError as e:\n            ReadExcel.write_data(DATA_FILE, 'business_token_login', case.case_id, 7, '失败')\n            logger.error(\"测试编号{},测试标题{},执行失败!实际结果{}\".format(case.case_id, case.case_title, res))\n            logger.exception(e)\n>           raise e\n\ntestcases\\test_business_token_login02\\test_login03.py:65: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <autotest.testcases.test_business_token_login02.test_login03.TestLogin object at 0x0000028322486AC8>\ncase = <comms.excel_utils.CaseData object at 0x00000283224DE588>\n\n    @allure.severity(\"critical\")\n    @allure.description(\"商品登录模块接口测试用例\")\n    @pytest.mark.parametrize('case', cases)\n    def test_login(self, case):\n        allure.dynamic.title(case.case_title)\n        allure.attach(body=case.url, name='接口路径')\n        allure.attach(body=case.case_data, name='请求参数')\n    \n        uname = eval(case.case_data)[\"username\"]\n        pwd = eval(case.case_data)[\"password\"]\n        # 正确流程\n        if case.case_id == 1:\n            self.db.cud(\"delete from tb_user where name = %s;\", (uname,))\n            self.db.cud(\"insert into tb_user(name,passwd,email,phone) values(%s,%s,%s,%s);\",\n                        (uname, pwd, 'tester24@163.com', '17788995566'))\n        if case.case_id == 5:  # 用户名不存在的场景\n            self.db.cud(\"delete from tb_user where name = %s;\", (uname,))\n    \n        response = requests.post(url=case.url, data=eval(case.case_data))\n        res = response.json()\n        allure.attach(body=str(res), name='响应结果')\n    \n        try:\n            if case.case_id == 1:\n                assert case.expect in str(res)\n            else:\n>               assert eval(case.expect) == res\nE               AssertionError: assert {'code': 1007...: '用户名或者密码错误'} == {'code': 1000...MDQ4NWFhNg=='}\nE                 Differing items:\nE                 {'msg': '用户名或者密码错误'} != {'msg': '登录成功'}\nE                 {'code': 1007} != {'code': 1000}\nE                 Right contains 1 more item:\nE                 {'token': 'MTY0NjgzODc5NS42NDE4OTQ6Y2E0ZGRkNGU2MzI1OTZiZmE2MTRiODAyMGMxN2ZjMmVjMDQ4NWFhNg=='}\nE                 Full diff:\nE                   {...\nE                 \nE                 ...Full output truncated (9 lines hidden), use '-vv' to show\n\ntestcases\\test_business_token_login02\\test_login03.py:60: AssertionError"}, "description": "商品登录模块接口测试用例", "attachments": [{"name": "接口路径", "source": "fcbdd9d2-7ef2-4211-b8d4-46b64bb13b2a-attachment.attach"}, {"name": "请求参数", "source": "ebc6fe7f-d60f-4e9e-812f-f028312d9213-attachment.attach"}, {"name": "响应结果", "source": "95a13d2e-a97c-4644-839e-722f9f059f32-attachment.attach"}, {"name": "log", "source": "be2237f8-aee1-4df8-8f45-aa926d97e3d3-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "case", "value": "<comms.excel_utils.CaseData object at 0x00000283224DE588>"}], "start": 1646808795637, "stop": 1646808795826, "uuid": "e17f9eef-6e0c-40e2-8f94-1126204c88f6", "historyId": "f31f43c141e983cfe2a8275eb14998df", "testCaseId": "98da7731e1d56d672d263431818693c0", "fullName": "testcases.test_business_token_login02.test_login03.TestLogin#test_login", "labels": [{"name": "severity", "value": "critical"}, {"name": "feature", "value": "商品登录模块"}, {"name": "parentSuite", "value": "testcases.test_business_token_login02"}, {"name": "suite", "value": "test_login03"}, {"name": "subSuite", "value": "TestLogin"}, {"name": "host", "value": "DESKTOP-AM9Q0VH"}, {"name": "thread", "value": "10028-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.test_business_token_login02.test_login03"}]}