{
  "uid" : "47a3ad0ed3744363",
  "name" : "正常流程",
  "fullName" : "test_register.TestRegister#test_register",
  "historyId" : "a5ea6d936144286aea70e533fe8308fb",
  "time" : {
    "start" : 1646042142138,
    "stop" : 1646042142173,
    "duration" : 35
  },
  "description" : "京东小程序入口注册接口",
  "descriptionHtml" : "<p>京东小程序入口注册接口</p>\n",
  "status" : "failed",
  "statusMessage" : "AssertionError: assert {'code': 9999, 'msg': '注册成功'} == {'code': 1008...sg': '用户名已存在'}\n  Differing items:\n  {'msg': '注册成功'} != {'msg': '用户名已存在'}\n  {'code': 9999} != {'code': 1008}\n  Use -v to get the full diff",
  "statusTrace" : "self = <day16.test_excel_data03.test_register.TestRegister object at 0x0000025903441278>\ncase = <excel_utils.CaseData object at 0x0000025903359EF0>\n\n    @allure.severity(\"critical\")  # 为allure报告修改case优先级\n    @allure.description(\"京东小程序入口注册接口\")  # 为allure报告添加case描述\n    @pytest.mark.parametrize('case', cases)\n    def test_register(self, case):\n        allure.dynamic.title(case.case_title)  # 动态获取allure报告的case标题\n        allure.attach(body=case.url, name='接口路径')  # allure报告显示接口路径\n        allure.attach(body=case.case_data, name='接口参数')  # allure报告显示接口参数\n    \n        response = requests.post(url=case.url, data=eval(case.case_data))\n        res = response.json()\n    \n        allure.attach(body=str(res), name='响应结果')  # allure报告显示响应结果\n    \n        try:\n            assert eval(case.expect) == res\n        except AssertionError as e:\n            ReadExcel.write_data(r'./cases.xlsx', 'user_register', case.case_id, 7, '失败')\n            logger.error(\"测试编号{},测试用例标题{},执行失败!实际结果是:{}\".format(case.case_id, case.case_title, res))\n            logger.exception(e)\n>           raise e\n\ntest_register.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <day16.test_excel_data03.test_register.TestRegister object at 0x0000025903441278>\ncase = <excel_utils.CaseData object at 0x0000025903359EF0>\n\n    @allure.severity(\"critical\")  # 为allure报告修改case优先级\n    @allure.description(\"京东小程序入口注册接口\")  # 为allure报告添加case描述\n    @pytest.mark.parametrize('case', cases)\n    def test_register(self, case):\n        allure.dynamic.title(case.case_title)  # 动态获取allure报告的case标题\n        allure.attach(body=case.url, name='接口路径')  # allure报告显示接口路径\n        allure.attach(body=case.case_data, name='接口参数')  # allure报告显示接口参数\n    \n        response = requests.post(url=case.url, data=eval(case.case_data))\n        res = response.json()\n    \n        allure.attach(body=str(res), name='响应结果')  # allure报告显示响应结果\n    \n        try:\n>           assert eval(case.expect) == res\nE           AssertionError: assert {'code': 9999, 'msg': '注册成功'} == {'code': 1008...sg': '用户名已存在'}\nE             Differing items:\nE             {'msg': '注册成功'} != {'msg': '用户名已存在'}\nE             {'code': 9999} != {'code': 1008}\nE             Use -v to get the full diff\n\ntest_register.py:38: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : false,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "description" : "京东小程序入口注册接口",
    "status" : "failed",
    "statusMessage" : "AssertionError: assert {'code': 9999, 'msg': '注册成功'} == {'code': 1008...sg': '用户名已存在'}\n  Differing items:\n  {'msg': '注册成功'} != {'msg': '用户名已存在'}\n  {'code': 9999} != {'code': 1008}\n  Use -v to get the full diff",
    "statusTrace" : "self = <day16.test_excel_data03.test_register.TestRegister object at 0x0000025903441278>\ncase = <excel_utils.CaseData object at 0x0000025903359EF0>\n\n    @allure.severity(\"critical\")  # 为allure报告修改case优先级\n    @allure.description(\"京东小程序入口注册接口\")  # 为allure报告添加case描述\n    @pytest.mark.parametrize('case', cases)\n    def test_register(self, case):\n        allure.dynamic.title(case.case_title)  # 动态获取allure报告的case标题\n        allure.attach(body=case.url, name='接口路径')  # allure报告显示接口路径\n        allure.attach(body=case.case_data, name='接口参数')  # allure报告显示接口参数\n    \n        response = requests.post(url=case.url, data=eval(case.case_data))\n        res = response.json()\n    \n        allure.attach(body=str(res), name='响应结果')  # allure报告显示响应结果\n    \n        try:\n            assert eval(case.expect) == res\n        except AssertionError as e:\n            ReadExcel.write_data(r'./cases.xlsx', 'user_register', case.case_id, 7, '失败')\n            logger.error(\"测试编号{},测试用例标题{},执行失败!实际结果是:{}\".format(case.case_id, case.case_title, res))\n            logger.exception(e)\n>           raise e\n\ntest_register.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <day16.test_excel_data03.test_register.TestRegister object at 0x0000025903441278>\ncase = <excel_utils.CaseData object at 0x0000025903359EF0>\n\n    @allure.severity(\"critical\")  # 为allure报告修改case优先级\n    @allure.description(\"京东小程序入口注册接口\")  # 为allure报告添加case描述\n    @pytest.mark.parametrize('case', cases)\n    def test_register(self, case):\n        allure.dynamic.title(case.case_title)  # 动态获取allure报告的case标题\n        allure.attach(body=case.url, name='接口路径')  # allure报告显示接口路径\n        allure.attach(body=case.case_data, name='接口参数')  # allure报告显示接口参数\n    \n        response = requests.post(url=case.url, data=eval(case.case_data))\n        res = response.json()\n    \n        allure.attach(body=str(res), name='响应结果')  # allure报告显示响应结果\n    \n        try:\n>           assert eval(case.expect) == res\nE           AssertionError: assert {'code': 9999, 'msg': '注册成功'} == {'code': 1008...sg': '用户名已存在'}\nE             Differing items:\nE             {'msg': '注册成功'} != {'msg': '用户名已存在'}\nE             {'code': 9999} != {'code': 1008}\nE             Use -v to get the full diff\n\ntest_register.py:38: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "d17516c1be4a7a72",
      "name" : "接口路径",
      "source" : "d17516c1be4a7a72.attach",
      "type" : "text/plain",
      "size" : 30
    }, {
      "uid" : "addfe38d93aba502",
      "name" : "接口参数",
      "source" : "addfe38d93aba502.attach",
      "type" : "text/plain",
      "size" : 109
    }, {
      "uid" : "ea90afaf91eebf13",
      "name" : "响应结果",
      "source" : "ea90afaf91eebf13.attach",
      "type" : "text/plain",
      "size" : 43
    }, {
      "uid" : "1c7bc5948baedcf",
      "name" : "log",
      "source" : "1c7bc5948baedcf.txt",
      "type" : "text/plain",
      "size" : 1048
    }, {
      "uid" : "62fbde13b32fc263",
      "name" : "stderr",
      "source" : "62fbde13b32fc263.txt",
      "type" : "text/plain",
      "size" : 1109
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : true,
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 5
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "severity",
    "value" : "critical"
  }, {
    "name" : "feature",
    "value" : "注册模块"
  }, {
    "name" : "suite",
    "value" : "test_register"
  }, {
    "name" : "subSuite",
    "value" : "TestRegister"
  }, {
    "name" : "host",
    "value" : "DESKTOP-AM9Q0VH"
  }, {
    "name" : "thread",
    "value" : "12124-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_register"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "case",
    "value" : "<excel_utils.CaseData object at 0x0000025903359EF0>"
  } ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ ]
  },
  "source" : "47a3ad0ed3744363.json",
  "parameterValues" : [ "<excel_utils.CaseData object at 0x0000025903359EF0>" ]
}