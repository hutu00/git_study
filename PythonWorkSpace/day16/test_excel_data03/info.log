2022-02-28 17:55:41,944 - [test_login.py - 46] - INFO:测试编号1,测试用例标题正常流程,执行成功!
2022-02-28 17:55:41,983 - [test_login.py - 46] - INFO:测试编号2,测试用例标题测试用户名输出错误的场景,执行成功!
2022-02-28 17:55:42,023 - [test_login.py - 46] - INFO:测试编号3,测试用例标题测试用户名为空的场景,执行成功!
2022-02-28 17:55:42,065 - [test_login.py - 46] - INFO:测试编号4,测试用例标题测试密码输入错误的场景,执行成功!
2022-02-28 17:55:42,105 - [test_login.py - 46] - INFO:测试编号5,测试用例标题测试密码为空的场景,执行成功!
2022-02-28 17:55:42,172 - [test_register.py - 41] - ERROR:测试编号1,测试用例标题正常流程,执行失败!实际结果是:{'code': 1008, 'msg': '用户名已存在'}
2022-02-28 17:55:42,172 - [test_register.py - 42] - ERROR:assert {'code': 9999, 'msg': '注册成功'} == {'code': 1008...sg': '用户名已存在'}
  Differing items:
  {'msg': '注册成功'} != {'msg': '用户名已存在'}
  {'code': 9999} != {'code': 1008}
  Use -v to get the full diff
Traceback (most recent call last):
  File "D:\PythonWorkSpace\day16\test_excel_data03\test_register.py", line 38, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 9999, 'msg': '注册成功'} == {'code': 1008...sg': '用户名已存在'}
  Differing items:
  {'msg': '注册成功'} != {'msg': '用户名已存在'}
  {'code': 9999} != {'code': 1008}
  Use -v to get the full diff
2022-02-28 17:55:42,244 - [test_register.py - 46] - INFO:测试编号2,测试用例标题用户名为空的场景,执行成功!
2022-02-28 17:55:42,281 - [test_register.py - 46] - INFO:测试编号3,测试用例标题用户名入参无效边界值的场景,执行成功!
2022-02-28 17:55:42,317 - [test_register.py - 46] - INFO:测试编号4,测试用例标题密码入参为空的场景,执行成功!
2022-02-28 17:55:42,353 - [test_register.py - 46] - INFO:测试编号5,测试用例标题密码入参无效边界值的场景,执行成功!
2022-02-28 17:55:42,391 - [test_register.py - 46] - INFO:测试编号6,测试用例标题确认密码与密码入参不一致的场景,执行成功!
2022-02-28 17:55:42,429 - [test_register.py - 46] - INFO:测试编号7,测试用例标题邮箱注册为空的场景,执行成功!
2022-02-28 17:55:42,468 - [test_register.py - 46] - INFO:测试编号8,测试用例标题邮箱入参格式错误的场景,执行成功!
2022-02-28 17:55:42,506 - [test_register.py - 46] - INFO:测试编号9,测试用例标题测试用户名已注册的场景,执行成功!
2022-02-28 17:55:42,542 - [test_register.py - 46] - INFO:测试编号10,测试用例标题测试手机号为空的场景,执行成功!
2022-02-28 17:56:08,323 - [test_login.py - 46] - INFO:测试编号1,测试用例标题正常流程,执行成功!
2022-02-28 17:56:08,372 - [test_login.py - 46] - INFO:测试编号2,测试用例标题测试用户名输出错误的场景,执行成功!
2022-02-28 17:56:08,415 - [test_login.py - 46] - INFO:测试编号3,测试用例标题测试用户名为空的场景,执行成功!
2022-02-28 17:56:08,452 - [test_login.py - 46] - INFO:测试编号4,测试用例标题测试密码输入错误的场景,执行成功!
2022-02-28 17:56:08,488 - [test_login.py - 46] - INFO:测试编号5,测试用例标题测试密码为空的场景,执行成功!
2022-02-28 17:56:08,559 - [test_register.py - 41] - ERROR:测试编号1,测试用例标题正常流程,执行失败!实际结果是:{'code': 1008, 'msg': '用户名已存在'}
2022-02-28 17:56:08,559 - [test_register.py - 42] - ERROR:assert {'code': 9999, 'msg': '注册成功'} == {'code': 1008...sg': '用户名已存在'}
  Differing items:
  {'code': 9999} != {'code': 1008}
  {'msg': '注册成功'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1008, 'msg': '用户名已存在'}
  + {'code': 9999, 'msg': '注册成功'}
Traceback (most recent call last):
  File "D:\PythonWorkSpace\day16\test_excel_data03\test_register.py", line 38, in test_register
    assert eval(case.expect) == res
AssertionError: assert {'code': 9999, 'msg': '注册成功'} == {'code': 1008...sg': '用户名已存在'}
  Differing items:
  {'code': 9999} != {'code': 1008}
  {'msg': '注册成功'} != {'msg': '用户名已存在'}
  Full diff:
  - {'code': 1008, 'msg': '用户名已存在'}
  + {'code': 9999, 'msg': '注册成功'}
2022-02-28 17:56:08,639 - [test_register.py - 46] - INFO:测试编号2,测试用例标题用户名为空的场景,执行成功!
2022-02-28 17:56:08,678 - [test_register.py - 46] - INFO:测试编号3,测试用例标题用户名入参无效边界值的场景,执行成功!
2022-02-28 17:56:08,716 - [test_register.py - 46] - INFO:测试编号4,测试用例标题密码入参为空的场景,执行成功!
2022-02-28 17:56:08,755 - [test_register.py - 46] - INFO:测试编号5,测试用例标题密码入参无效边界值的场景,执行成功!
2022-02-28 17:56:08,795 - [test_register.py - 46] - INFO:测试编号6,测试用例标题确认密码与密码入参不一致的场景,执行成功!
2022-02-28 17:56:08,837 - [test_register.py - 46] - INFO:测试编号7,测试用例标题邮箱注册为空的场景,执行成功!
2022-02-28 17:56:08,881 - [test_register.py - 46] - INFO:测试编号8,测试用例标题邮箱入参格式错误的场景,执行成功!
2022-02-28 17:56:08,919 - [test_register.py - 46] - INFO:测试编号9,测试用例标题测试用户名已注册的场景,执行成功!
2022-02-28 17:56:08,957 - [test_register.py - 46] - INFO:测试编号10,测试用例标题测试手机号为空的场景,执行成功!
