"""
--------------------------------
@Time    :  2022/1/18 - 15:54 
@Author  :  Lee
@File    :  python_basic25 
--------------------------------
"""

"""
python的深拷贝和浅拷贝有什么区别?
浅拷贝的使用方法: B = copy.copy(A)
使用浅拷贝,当原容器对象中可变对象中有元素发生变化,拷贝到的对象也会发生变化

深拷贝使用的方法: B = copy.deepcopy(A)
使用深拷贝,当原容器对象中可变对象中有元素发生变化,拷贝得到的对象不会发生变化
"""

from copy import copy, deepcopy  # 导入copy模块的copy函数

# 1.赋值 并没有新的东西产生,而是让新的标识符指向原来的物理地址
a = [1, 2, 3, 4, 5, 6]
b = a
print("a的地址是:", id(a))  # a的地址是: 2293380440648
print("b的地址是:", id(b))  # b的地址是: 2293380440648
# 因为a和b 指向的是同一个物理地址,所以a和b发生变化,另一个都会跟着变化
a[0] = 999
print(a)  # [999, 2, 3, 4, 5, 6]
print(b)  # [999, 2, 3, 4, 5, 6]

# 2.浅拷贝
list1 = ['a', 'b', 'c', 1, 2, 3, [1, 2, 3]]

list2 = copy(list1)
print(list2)  # ['a', 'b', 'c', 1, 2, 3, [1, 2, 3]]
print('list1的物理地址是:', id(list1))  # list1的物理地址是: 1699030470728
print('list2的物理地址是:', id(list2))  # list2的物理地址是: 1699030470792

# 当原容器对象list1中可变类型对象中有元素发生变化,拷贝到的对象list2也会发生变化
list1[6][1] = 789
print('list1的值是:', list1)  # list1的值是: ['a', 'b', 'c', 1, 2, 3, [1, 789, 3]]
print('list2的值是:', list2)  # list2的值是: ['a', 'b', 'c', 1, 2, 3, [1, 789, 3]]
# 当原容器对象list1中不可变类型对象中有元素发生变化,拷贝到的对象list2不会发生变化
list1[0] = '小美'
print('list1的值是:', list1)  # list1的值是: ['小美', 'b', 'c', 1, 2, 3, [1, 789, 3]]
print('list2的值是:', list2)  # list2的值是: ['a', 'b', 'c', 1, 2, 3, [1, 789, 3]]

# 3.深拷贝
list1 = ['a', 'b', 'c', 1, 2, 3, [1, 2, 3]]

list2 = deepcopy(list1)
print('list1的物理地址是:', id(list1))  # list1的物理地址是: 2384045166920
print('list2的物理地址是:', id(list2))  # list2的物理地址是: 1913829745288

# 深拷贝复制出完全独立的新对象
list1[6][1] = 789
print('list1的值是:', list1)  # list1的值是: ['a', 'b', 'c', 1, 2, 3, [1, 789, 3]]
print('list2的值是:', list2)  # list2的值是: ['a', 'b', 'c', 1, 2, 3, [1, 2, 3]]
list1[0] = '小美'
print('list1的值是:', list1)  # list1的值是: ['小美', 'b', 'c', 1, 2, 3, [1, 789, 3]]
print('list2的值是:', list2)  # list2的值是: ['a', 'b', 'c', 1, 2, 3, [1, 2, 3]]
